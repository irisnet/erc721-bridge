// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: erc721_bridge/converter/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryClassPairsRequest is the request type for the Query/ClassPairs RPC
// method.
type QueryClassPairsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassPairsRequest) Reset()         { *m = QueryClassPairsRequest{} }
func (m *QueryClassPairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassPairsRequest) ProtoMessage()    {}
func (*QueryClassPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4e86cba405d34b0, []int{0}
}
func (m *QueryClassPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassPairsRequest.Merge(m, src)
}
func (m *QueryClassPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassPairsRequest proto.InternalMessageInfo

func (m *QueryClassPairsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryClassPairsResponse is the response type for the Query/ClassPairs RPC
// method.
type QueryClassPairsResponse struct {
	// class_pairs is a slice of registered class pairs for the ERC721 module
	ClassPairs []ClassPair `protobuf:"bytes,1,rep,name=class_pairs,json=classPairs,proto3" json:"class_pairs"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassPairsResponse) Reset()         { *m = QueryClassPairsResponse{} }
func (m *QueryClassPairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassPairsResponse) ProtoMessage()    {}
func (*QueryClassPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4e86cba405d34b0, []int{1}
}
func (m *QueryClassPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassPairsResponse.Merge(m, src)
}
func (m *QueryClassPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassPairsResponse proto.InternalMessageInfo

func (m *QueryClassPairsResponse) GetClassPairs() []ClassPair {
	if m != nil {
		return m.ClassPairs
	}
	return nil
}

func (m *QueryClassPairsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryClassPairRequest is the request type for the Query/ClassPair RPC method.
type QueryClassPairRequest struct {
	// token identifier can be either the hex contract address of the ERC721 or the
	// Cosmos base denomination
	Class string `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
}

func (m *QueryClassPairRequest) Reset()         { *m = QueryClassPairRequest{} }
func (m *QueryClassPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassPairRequest) ProtoMessage()    {}
func (*QueryClassPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4e86cba405d34b0, []int{2}
}
func (m *QueryClassPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassPairRequest.Merge(m, src)
}
func (m *QueryClassPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassPairRequest proto.InternalMessageInfo

func (m *QueryClassPairRequest) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

// QueryClassPairResponse is the response type for the Query/ClassPair RPC
// method.
type QueryClassPairResponse struct {
	// class_pairs returns the info about a registered class pair for the ERC721 module
	ClassPair ClassPair `protobuf:"bytes,1,opt,name=class_pair,json=classPair,proto3" json:"class_pair"`
}

func (m *QueryClassPairResponse) Reset()         { *m = QueryClassPairResponse{} }
func (m *QueryClassPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassPairResponse) ProtoMessage()    {}
func (*QueryClassPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4e86cba405d34b0, []int{3}
}
func (m *QueryClassPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassPairResponse.Merge(m, src)
}
func (m *QueryClassPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassPairResponse proto.InternalMessageInfo

func (m *QueryClassPairResponse) GetClassPair() ClassPair {
	if m != nil {
		return m.ClassPair
	}
	return ClassPair{}
}

// QueryTokenTraceRequest is the request type for the Query/TokenTrace RPC method.
type QueryTokenTraceRequest struct {
	// class_id is class_id entered by the user (may be ibc_class_id or erc721 contract address)
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	// token_id is token_id entered by the user (may be nft_id or erc721 token_id)
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (m *QueryTokenTraceRequest) Reset()         { *m = QueryTokenTraceRequest{} }
func (m *QueryTokenTraceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenTraceRequest) ProtoMessage()    {}
func (*QueryTokenTraceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4e86cba405d34b0, []int{4}
}
func (m *QueryTokenTraceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenTraceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenTraceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenTraceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenTraceRequest.Merge(m, src)
}
func (m *QueryTokenTraceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenTraceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenTraceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenTraceRequest proto.InternalMessageInfo

func (m *QueryTokenTraceRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryTokenTraceRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

// QueryTokenTraceResponse is the response type for the Query/TokenTrace RPC
// method.
type QueryTokenTraceResponse struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (m *QueryTokenTraceResponse) Reset()         { *m = QueryTokenTraceResponse{} }
func (m *QueryTokenTraceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenTraceResponse) ProtoMessage()    {}
func (*QueryTokenTraceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4e86cba405d34b0, []int{5}
}
func (m *QueryTokenTraceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenTraceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenTraceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenTraceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenTraceResponse.Merge(m, src)
}
func (m *QueryTokenTraceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenTraceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenTraceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenTraceResponse proto.InternalMessageInfo

func (m *QueryTokenTraceResponse) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryTokenTraceResponse) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryClassPairsRequest)(nil), "erc721_bridge.converter.v1.QueryClassPairsRequest")
	proto.RegisterType((*QueryClassPairsResponse)(nil), "erc721_bridge.converter.v1.QueryClassPairsResponse")
	proto.RegisterType((*QueryClassPairRequest)(nil), "erc721_bridge.converter.v1.QueryClassPairRequest")
	proto.RegisterType((*QueryClassPairResponse)(nil), "erc721_bridge.converter.v1.QueryClassPairResponse")
	proto.RegisterType((*QueryTokenTraceRequest)(nil), "erc721_bridge.converter.v1.QueryTokenTraceRequest")
	proto.RegisterType((*QueryTokenTraceResponse)(nil), "erc721_bridge.converter.v1.QueryTokenTraceResponse")
}

func init() {
	proto.RegisterFile("erc721_bridge/converter/v1/query.proto", fileDescriptor_b4e86cba405d34b0)
}

var fileDescriptor_b4e86cba405d34b0 = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0xb2, 0x01, 0x75, 0x6f, 0xd6, 0x80, 0x51, 0xa1, 0x30, 0x45, 0x62, 0x1d, 0x95,
	0x66, 0x93, 0x4c, 0x82, 0x13, 0x12, 0x2a, 0x12, 0x30, 0x34, 0xc1, 0xa8, 0x76, 0xe2, 0x52, 0x9c,
	0xc4, 0x0a, 0x16, 0x5b, 0x9c, 0xc5, 0x6e, 0xc5, 0x34, 0xf5, 0xc2, 0x27, 0x40, 0xe2, 0x03, 0x70,
	0xe3, 0xc0, 0x89, 0x6f, 0xc0, 0x75, 0xc7, 0x4a, 0x5c, 0x38, 0x21, 0xd4, 0xf2, 0x41, 0x50, 0x6c,
	0x37, 0x6d, 0x29, 0x94, 0x76, 0xb7, 0xd8, 0xef, 0x9f, 0xe7, 0xf7, 0x3e, 0x7e, 0x15, 0xb8, 0xc9,
	0xb2, 0xf0, 0x9e, 0xef, 0xb5, 0x83, 0x8c, 0x47, 0x31, 0x23, 0xa1, 0x48, 0xba, 0x2c, 0x53, 0x2c,
	0x23, 0x5d, 0x8f, 0x1c, 0x77, 0x58, 0x76, 0x82, 0xd3, 0x4c, 0x28, 0x81, 0x6a, 0x53, 0x79, 0xb8,
	0xc8, 0xc3, 0x5d, 0xaf, 0xb6, 0x16, 0x8b, 0x58, 0xe8, 0x34, 0x92, 0x7f, 0x99, 0x8a, 0xda, 0x8d,
	0x58, 0x88, 0xf8, 0x90, 0x11, 0x9a, 0x72, 0x42, 0x93, 0x44, 0x28, 0xaa, 0xb8, 0x48, 0xa4, 0x8d,
	0x36, 0x42, 0x21, 0x8f, 0x84, 0x24, 0x01, 0x95, 0xcc, 0x08, 0x91, 0xae, 0x17, 0x30, 0x45, 0x3d,
	0x92, 0xd2, 0x98, 0x27, 0x3a, 0xd9, 0xe6, 0xd6, 0xe7, 0x30, 0x9a, 0x90, 0x49, 0x74, 0x5f, 0xc1,
	0xab, 0x2f, 0xf2, 0x56, 0x0f, 0x0f, 0xa9, 0x94, 0xfb, 0x94, 0x67, 0xb2, 0xc5, 0x8e, 0x3b, 0x4c,
	0x2a, 0xf4, 0x08, 0xc2, 0x71, 0xdb, 0x75, 0xb0, 0x01, 0xb6, 0xaa, 0xfe, 0x26, 0x36, 0x0c, 0x38,
	0x67, 0xc0, 0x66, 0x58, 0xcb, 0x80, 0xf7, 0x69, 0xcc, 0x6c, 0x6d, 0x6b, 0xa2, 0xd2, 0xfd, 0x02,
	0xe0, 0xb5, 0x19, 0x09, 0x99, 0x8a, 0x44, 0x32, 0xb4, 0x07, 0xab, 0x61, 0x7e, 0xdb, 0x4e, 0xf3,
	0xeb, 0x75, 0xb0, 0x71, 0x61, 0xab, 0xea, 0xdf, 0xc2, 0xff, 0x36, 0x0e, 0x17, 0x4d, 0x9a, 0x2b,
	0x67, 0x3f, 0x6e, 0x96, 0x5a, 0x30, 0x2c, 0xba, 0xa2, 0xc7, 0x53, 0xc4, 0x65, 0x4d, 0x5c, 0xff,
	0x2f, 0xb1, 0x41, 0x99, 0x42, 0xde, 0x86, 0x57, 0xa6, 0x89, 0x47, 0x9e, 0xac, 0xc1, 0x55, 0xad,
	0xa7, 0xed, 0xa8, 0xb4, 0xcc, 0xc1, 0x8d, 0xfe, 0xf4, 0xb0, 0x98, 0xef, 0x29, 0x84, 0xe3, 0xf9,
	0xac, 0x87, 0x4b, 0x8d, 0x57, 0x29, 0xc6, 0x73, 0x9f, 0x59, 0x95, 0x03, 0xf1, 0x86, 0x25, 0x07,
	0x19, 0x0d, 0x47, 0x6e, 0xa3, 0xeb, 0xf0, 0xb2, 0x51, 0xe1, 0x91, 0x05, 0xbb, 0xa4, 0xcf, 0xbb,
	0x51, 0x1e, 0x52, 0x79, 0x7e, 0x1e, 0x2a, 0x9b, 0x90, 0x3e, 0xef, 0x46, 0xee, 0x73, 0xfb, 0x2c,
	0x93, 0xfd, 0x2c, 0xf6, 0xb9, 0x1a, 0xfa, 0x1f, 0x57, 0xe0, 0xaa, 0xee, 0x88, 0x3e, 0x01, 0x08,
	0xc7, 0xaf, 0x8d, 0xfc, 0x79, 0x13, 0xff, 0x7d, 0xfb, 0x6a, 0x3b, 0x4b, 0xd5, 0x18, 0x6e, 0x97,
	0xbc, 0xfb, 0xf6, 0xeb, 0x43, 0xf9, 0x36, 0xaa, 0x93, 0x39, 0xeb, 0x3f, 0xb1, 0x70, 0xe8, 0x33,
	0x80, 0x95, 0xa2, 0x0f, 0xf2, 0x16, 0xd7, 0x1c, 0x61, 0xfa, 0xcb, 0x94, 0x58, 0xca, 0xbb, 0x9a,
	0xf2, 0x0e, 0xc2, 0x8b, 0x51, 0x92, 0x53, 0xfd, 0xdd, 0x43, 0x5f, 0x01, 0x84, 0xe3, 0xc7, 0x5a,
	0xc0, 0xd5, 0x99, 0x4d, 0x59, 0xc0, 0xd5, 0xd9, 0x6d, 0x70, 0x9f, 0x68, 0xde, 0x26, 0x7a, 0x30,
	0x8f, 0xd7, 0x2c, 0x85, 0xca, 0x0b, 0x2d, 0x70, 0x9b, 0x47, 0xf7, 0x1b, 0x8d, 0x1e, 0x39, 0x1d,
	0xed, 0x4b, 0xaf, 0xb9, 0x77, 0x36, 0x70, 0x40, 0x7f, 0xe0, 0x80, 0x9f, 0x03, 0x07, 0xbc, 0x1f,
	0x3a, 0xa5, 0xfe, 0xd0, 0x29, 0x7d, 0x1f, 0x3a, 0xa5, 0x97, 0x7e, 0xcc, 0xd5, 0xeb, 0x4e, 0x80,
	0x43, 0x71, 0x44, 0x78, 0xc6, 0x65, 0xc2, 0x94, 0x55, 0xdb, 0xb6, 0x6a, 0x6f, 0x27, 0xf4, 0xd4,
	0x49, 0xca, 0x64, 0x70, 0x51, 0xff, 0xc1, 0x76, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x36,
	0x11, 0x5a, 0x90, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ClassPairs retrieves registered class pairs
	ClassPairs(ctx context.Context, in *QueryClassPairsRequest, opts ...grpc.CallOption) (*QueryClassPairsResponse, error)
	// ClassPair retrieves a registered class pair
	ClassPair(ctx context.Context, in *QueryClassPairRequest, opts ...grpc.CallOption) (*QueryClassPairResponse, error)
	// TokenTrace retrieves a cross-chain token trace
	TokenTrace(ctx context.Context, in *QueryTokenTraceRequest, opts ...grpc.CallOption) (*QueryTokenTraceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ClassPairs(ctx context.Context, in *QueryClassPairsRequest, opts ...grpc.CallOption) (*QueryClassPairsResponse, error) {
	out := new(QueryClassPairsResponse)
	err := c.cc.Invoke(ctx, "/erc721_bridge.converter.v1.Query/ClassPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassPair(ctx context.Context, in *QueryClassPairRequest, opts ...grpc.CallOption) (*QueryClassPairResponse, error) {
	out := new(QueryClassPairResponse)
	err := c.cc.Invoke(ctx, "/erc721_bridge.converter.v1.Query/ClassPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenTrace(ctx context.Context, in *QueryTokenTraceRequest, opts ...grpc.CallOption) (*QueryTokenTraceResponse, error) {
	out := new(QueryTokenTraceResponse)
	err := c.cc.Invoke(ctx, "/erc721_bridge.converter.v1.Query/TokenTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ClassPairs retrieves registered class pairs
	ClassPairs(context.Context, *QueryClassPairsRequest) (*QueryClassPairsResponse, error)
	// ClassPair retrieves a registered class pair
	ClassPair(context.Context, *QueryClassPairRequest) (*QueryClassPairResponse, error)
	// TokenTrace retrieves a cross-chain token trace
	TokenTrace(context.Context, *QueryTokenTraceRequest) (*QueryTokenTraceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ClassPairs(ctx context.Context, req *QueryClassPairsRequest) (*QueryClassPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassPairs not implemented")
}
func (*UnimplementedQueryServer) ClassPair(ctx context.Context, req *QueryClassPairRequest) (*QueryClassPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassPair not implemented")
}
func (*UnimplementedQueryServer) TokenTrace(ctx context.Context, req *QueryTokenTraceRequest) (*QueryTokenTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenTrace not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ClassPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erc721_bridge.converter.v1.Query/ClassPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassPairs(ctx, req.(*QueryClassPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erc721_bridge.converter.v1.Query/ClassPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassPair(ctx, req.(*QueryClassPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erc721_bridge.converter.v1.Query/TokenTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenTrace(ctx, req.(*QueryTokenTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erc721_bridge.converter.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassPairs",
			Handler:    _Query_ClassPairs_Handler,
		},
		{
			MethodName: "ClassPair",
			Handler:    _Query_ClassPair_Handler,
		},
		{
			MethodName: "TokenTrace",
			Handler:    _Query_TokenTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "erc721_bridge/converter/v1/query.proto",
}

func (m *QueryClassPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassPairs) > 0 {
		for iNdEx := len(m.ClassPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Class) > 0 {
		i -= len(m.Class)
		copy(dAtA[i:], m.Class)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Class)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClassPair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenTraceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenTraceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenTraceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenTraceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenTraceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenTraceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryClassPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClassPairs) > 0 {
		for _, e := range m.ClassPairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Class)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClassPair.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenTraceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenTraceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryClassPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassPairs = append(m.ClassPairs, ClassPair{})
			if err := m.ClassPairs[len(m.ClassPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Class = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClassPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenTraceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenTraceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenTraceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenTraceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenTraceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenTraceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
