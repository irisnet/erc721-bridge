// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/Context.sol";

contract ERC721PresetMinterPauser is
    Context,
    AccessControlEnumerable,
    ERC721Pausable,
    ERC721URIStorage
{
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    bytes32 public constant BURNER_ROLE = keccak256("BURNER_ROLE");

    string private _baseTokenURI;
    string private _classURI;
    string private _classData;

    // Optional mapping for token URIs
    mapping(uint256 => string) private _tokenURIs;
    // Optional mapping for token datas
    mapping(uint256 => string) private _tokenDatas;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI,
        string memory classURI_,
        string memory classData_
    ) ERC721(name, symbol) {
        _classURI = classURI_;
        _classData = classData_;

        _baseTokenURI = baseTokenURI;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
        _setupRole(BURNER_ROLE, _msgSender());
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(
        address to,
        uint256 tokenId,
        string memory uri,
        string memory _tokenData
    ) public virtual {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have minter role to mint"
        );

        _mint(to, tokenId);
        _setTokenURI(tokenId, uri);
        _setTokenData(tokenId, _tokenData);
    }

    /**
     * @dev Burns `tokenId`. See {ERC721-_burn}.
     * Requirements:
     * - the caller must have the `BURNER_ROLE`.
     */
    function burn(uint256 tokenId) public virtual {
        require(
            hasRole(BURNER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have burner role to burn"
        );
        _burn(tokenId);
    }

    function setClass(
        string memory classURI_,
        string memory classData_
    ) public virtual {
        require(
            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have admin role to set class data"
        );
        _classData = classData_;
        _classURI = classURI_;
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have pauser role to pause"
        );
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have pauser role to unpause"
        );
        _unpause();
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     *
     */
    function tokenURI(
        uint256 tokenId
    )
    public
    view
    virtual
    override(ERC721, ERC721URIStorage)
    returns (string memory)
    {
        return super.tokenURI(tokenId);
    }

    /**
     * @dev Returns the token data of the given `tokenId`.
     *
     */
    function tokenData(
        uint256 tokenId
    ) public view virtual returns (string memory) {
        return _tokenDatas[tokenId];
    }

    /**
     * @dev Returns the class data
     *
     */
    function classData() public view virtual returns (string memory) {
        return _classData;
    }

    /**
     * @dev Gets class URI.
     */
    function classURI() public view virtual returns (string memory) {
        return _classURI;
    }

    /**
     * @dev Sets `_setTokenData` as the tokenData of `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _setTokenData(
        uint256 tokenId,
        string memory _tokenData
    ) internal virtual {
        require(
            _exists(tokenId),
            "ERC721URIStorage: URI set of nonexistent token"
        );
        _tokenDatas[tokenId] = _tokenData;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 firstTokenId,
        uint256 batchSize
    ) internal virtual override(ERC721, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);
    }

    function _burn(
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);

        if (bytes(_tokenDatas[tokenId]).length != 0) {
            delete _tokenDatas[tokenId];
        }
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(
        bytes4 interfaceId
    )
    public
    view
    virtual
    override(AccessControlEnumerable, ERC721)
    returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
